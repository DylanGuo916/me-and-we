generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  avatar        String?
  createdAt     DateTime        @default(now())
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  Community     Community[]
  posts         Post[]
  communities   UserCommunity[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  authorId    String
  communityId String?
  createdAt   DateTime   @default(now())
  originalAuthor String?
  originalLink   String?
  slug        String?    @unique
  author      User       @relation(fields: [authorId], references: [id])
  community   Community? @relation(fields: [communityId], references: [id])
}

model Community {
  id          String          @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime        @default(now())
  owner       User            @relation(fields: [ownerId], references: [id])
  posts       Post[]
  members     UserCommunity[]
}

model UserCommunity {
  id          String    @id @default(uuid())
  userId      String
  communityId String
  joinedAt    DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, communityId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
